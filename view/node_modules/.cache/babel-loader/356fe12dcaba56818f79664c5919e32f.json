{"ast":null,"code":"var _jsxFileName = \"/home/davi/development/mk-info/view/src/components/common/input/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport styles from './styles.module.scss';\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Input(props) {\n  _s();\n\n  const [data, setData] = useState('');\n  const {\n    register\n  } = useForm(); // const formatData = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n  //   (props.name === 'cpf') && setData(formatCpf(event.target.value))\n  // }, [props.name])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: props.type,\n      ...register(\"user\"),\n      placeholder: props.placeholder,\n      maxLength: props.maxLength,\n      className: styles.customInput,\n      value: props.mask ? data : undefined,\n      required: props.required // onChange={props.mask ? formatData : undefined}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Input, \"7WYkjH4KxexVfG0csfxkstSrD30=\", false, function () {\n  return [useForm];\n});\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/davi/development/mk-info/view/src/components/common/input/index.tsx"],"names":["useState","styles","useForm","Input","props","data","setData","register","type","placeholder","maxLength","customInput","mask","undefined","required"],"mappings":";;;AAAA,SAAsBA,QAAtB,QAAsC,OAAtC;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAYA,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAkC;AAAA;;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeL,OAAO,EAA5B,CAFuC,CAIvC;AACA;AACA;;AAEA,sBACE;AAAA,2BACE;AACE,MAAA,IAAI,EAAEE,KAAK,CAACI,IADd;AAAA,SAEMD,QAAQ,CAAC,MAAD,CAFd;AAGE,MAAA,WAAW,EAAEH,KAAK,CAACK,WAHrB;AAIE,MAAA,SAAS,EAAEL,KAAK,CAACM,SAJnB;AAKE,MAAA,SAAS,EAAET,MAAM,CAACU,WALpB;AAME,MAAA,KAAK,EAAEP,KAAK,CAACQ,IAAN,GAAaP,IAAb,GAAoBQ,SAN7B;AAOE,MAAA,QAAQ,EAAET,KAAK,CAACU,QAPlB,CAQE;;AARF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAcD;;GAtBeX,K;UAEOD,O;;;KAFPC,K","sourcesContent":["import { useCallback, useState } from 'react'\nimport { formatCpf } from '../../../global/formatters'\nimport styles from './styles.module.scss'\nimport { useForm } from \"react-hook-form\";\n\ninterface PropsInput {\n  type: string\n  name: string\n  register?: any\n  placeholder: string\n  maxLength?: number\n  required?: boolean\n  mask?: boolean\n}\n\nexport function Input(props: PropsInput) {\n  const [data, setData] = useState('')\n  const { register } = useForm();\n\n  // const formatData = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n  //   (props.name === 'cpf') && setData(formatCpf(event.target.value))\n  // }, [props.name])\n\n  return (\n    <>\n      <input\n        type={props.type}\n        {...register(\"user\")}\n        placeholder={props.placeholder}\n        maxLength={props.maxLength}\n        className={styles.customInput}\n        value={props.mask ? data : undefined}\n        required={props.required}\n        // onChange={props.mask ? formatData : undefined}\n      />\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}