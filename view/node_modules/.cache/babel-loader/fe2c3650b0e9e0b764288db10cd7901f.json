{"ast":null,"code":"var _jsxFileName = \"/home/davi/development/mk-info/view/src/components/common/input/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Input({\n  type,\n  name,\n  placeholder,\n  required,\n  mask\n}) {\n  _s();\n\n  const [cpf, setCpf] = useState('');\n\n  function typeMask(type) {\n    if (type === 'cpf') {\n      return cpf;\n    }\n  }\n\n  const change = useCallback((event, mask) => {\n    setCpf(event.target.value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\"));\n  }, [typeMask(mask)]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      name: name,\n      placeholder: placeholder,\n      className: styles.customInput,\n      value: cpf,\n      required: required,\n      onChange: event => change(event, mask)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Input, \"QHRaefS56T9Un+x9Is/90VfC/Tk=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/davi/development/mk-info/view/src/components/common/input/index.tsx"],"names":["useCallback","useState","styles","Input","type","name","placeholder","required","mask","cpf","setCpf","typeMask","change","event","target","value","replace","customInput"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAUA,OAAO,SAASC,KAAT,CAAe;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA,QAA3B;AAAqCC,EAAAA;AAArC,CAAf,EAAwE;AAAA;;AAC7E,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,EAAD,CAA9B;;AAEA,WAASU,QAAT,CAAmBP,IAAnB,EAAiC;AAC/B,QAAIA,IAAI,KAAK,KAAb,EAAoB;AAClB,aAAOK,GAAP;AACD;AACF;;AAED,QAAMG,MAAM,GAAGZ,WAAW,CAAC,CAACa,KAAD,EAA6CL,IAA7C,KAA+D;AACxFE,IAAAA,MAAM,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,OAAnB,CAA2B,8BAA3B,EAA2D,aAA3D,CAAD,CAAN;AACD,GAFyB,EAEvB,CAACL,QAAQ,CAACH,IAAD,CAAT,CAFuB,CAA1B;AAIA,sBACE;AAAA,2BACE;AACE,MAAA,IAAI,EAAEJ,IADR;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,WAAW,EAAEC,WAHf;AAIE,MAAA,SAAS,EAAEJ,MAAM,CAACe,WAJpB;AAKE,MAAA,KAAK,EAAER,GALT;AAME,MAAA,QAAQ,EAAEF,QANZ;AAOE,MAAA,QAAQ,EAAEM,KAAK,IAAID,MAAM,CAACC,KAAD,EAAQL,IAAR;AAP3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAaD;;GA1BeL,K;;KAAAA,K","sourcesContent":["import { useCallback, useState } from 'react'\nimport styles from './styles.module.scss'\n\ninterface PropsInput {\n  type: string\n  name: string\n  placeholder: string\n  required?: boolean\n  mask?: string\n}\n\nexport function Input({ type, name, placeholder, required, mask }: PropsInput) {\n  const [cpf, setCpf] = useState('')\n\n  function typeMask (type: string) {\n    if (type === 'cpf') {\n      return cpf\n    }\n  }\n\n  const change = useCallback((event: React.ChangeEvent<HTMLInputElement>, mask?: string) => {\n    setCpf(event.target.value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\"))\n  }, [typeMask(mask)])\n\n  return (\n    <>\n      <input\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        className={styles.customInput}\n        value={cpf}\n        required={required}\n        onChange={event => change(event, mask)}\n      />\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}