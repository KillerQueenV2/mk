{"ast":null,"code":"import BASE_URL from \"../global/API\";\nexport class RepositoryProduct {\n  constructor() {\n    this.API = `${BASE_URL}/products`;\n  }\n\n  getAll() {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    return data;\n  }\n\n  getById(id) {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    const productById = data.then(product => product.filter(product => product.id === id));\n    return productById;\n  }\n\n  post(title, image, preco) {\n    const response = fetch(this.API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        image,\n        preco\n      })\n    });\n    const data = response.then(data => data.json());\n    const productId = data.then(data => data.id);\n    return productId;\n  }\n\n  patch(payload) {\n    const response = fetch(this.API, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = response.then(data => data.json());\n    const productId = data.then(data => data.id);\n    return productId;\n  }\n\n  verifyIfExist(productName) {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    const isExist = data.then(({\n      email\n    }) => {\n      return email.indexOf(productName) !== -1;\n    });\n    return isExist;\n  }\n\n}","map":{"version":3,"sources":["/home/davi/Development/mk-info/view/src/repository/Products.ts"],"names":["BASE_URL","RepositoryProduct","API","getAll","response","fetch","data","then","json","getById","id","productById","product","filter","post","title","image","preco","method","headers","body","JSON","stringify","productId","patch","payload","verifyIfExist","productName","isExist","email","indexOf"],"mappings":"AACA,OAAOA,QAAP,MAAqB,eAArB;AAEA,OAAO,MAAMC,iBAAN,CAAwB;AAAA;AAAA,SACrBC,GADqB,GACd,GAAEF,QAAS,WADG;AAAA;;AAGtBG,EAAAA,MAAM,GAAuB;AAClC,UAAMC,QAAQ,GAAGC,KAAK,CAAC,KAAKH,GAAN,CAAtB;AACA,UAAMI,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAtB,CAAb;AACA,WAAOF,IAAP;AACD;;AAEMG,EAAAA,OAAO,CAAEC,EAAF,EAAmC;AAC/C,UAAMN,QAAQ,GAAGC,KAAK,CAAC,KAAKH,GAAN,CAAtB;AACA,UAAMI,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAtB,CAAb;AACA,UAAMG,WAAW,GAAGL,IAAI,CAACC,IAAL,CAAUK,OAAO,IAAIA,OAAO,CAACC,MAAR,CAAgBD,OAAD,IAAuBA,OAAO,CAACF,EAAR,KAAeA,EAArD,CAArB,CAApB;AACA,WAAOC,WAAP;AACD;;AAEMG,EAAAA,IAAI,CAAEC,KAAF,EAAiBC,KAAjB,EAAgCC,KAAhC,EAAgE;AACzE,UAAMb,QAAQ,GAAGC,KAAK,CAAC,KAAKH,GAAN,EAAW;AAC/BgB,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFsB;AAG/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,OAAf;AAHyB,KAAX,CAAtB;AAKA,UAAMX,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAtB,CAAb;AACA,UAAMe,SAAS,GAAGjB,IAAI,CAACC,IAAL,CAAUD,IAAI,IAAIA,IAAI,CAACI,EAAvB,CAAlB;AACA,WAAOa,SAAP;AACD;;AAEMC,EAAAA,KAAK,CAAEC,OAAF,EAAmB;AAC7B,UAAMrB,QAAQ,GAAGC,KAAK,CAAC,KAAKH,GAAN,EAAW;AAC/BgB,MAAAA,MAAM,EAAE,OADuB;AAE/BC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFsB;AAG/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeG,OAAf;AAHyB,KAAX,CAAtB;AAKA,UAAMnB,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAtB,CAAb;AACA,UAAMe,SAAS,GAAGjB,IAAI,CAACC,IAAL,CAAUD,IAAI,IAAIA,IAAI,CAACI,EAAvB,CAAlB;AACA,WAAOa,SAAP;AACD;;AAEMG,EAAAA,aAAa,CAAEC,WAAF,EAAyC;AAC3D,UAAMvB,QAAQ,GAAGC,KAAK,CAAC,KAAKH,GAAN,CAAtB;AACA,UAAMI,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAtB,CAAb;AACA,UAAMoB,OAAO,GAAGtB,IAAI,CAACC,IAAL,CAAU,CAAC;AAAEsB,MAAAA;AAAF,KAAD,KAAe;AACvC,aAAOA,KAAK,CAACC,OAAN,CAAcH,WAAd,MAA+B,CAAC,CAAvC;AACD,KAFe,CAAhB;AAGA,WAAOC,OAAP;AACD;;AA7C4B","sourcesContent":["import { IProduct } from \"../global/interfaces\";\nimport BASE_URL from \"../global/API\";\n\nexport class RepositoryProduct {\n  private API = `${BASE_URL}/products`\n\n  public getAll (): Promise<IProduct> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    return data\n  }\n\n  public getById (id: number): Promise<IProduct[]> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    const productById = data.then(product => product.filter((product: IProduct) => product.id === id))\n    return productById\n  }\n\n  public post (title: string, image: string, preco: string): Promise<number> {\n    const response = fetch(this.API, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title, image, preco })\n    })\n    const data = response.then(data => data.json())\n    const productId = data.then(data => data.id)\n    return productId\n  }\n\n  public patch (payload: Object) {\n    const response = fetch(this.API, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    })\n    const data = response.then(data => data.json())\n    const productId = data.then(data => data.id)\n    return productId\n  }\n\n  public verifyIfExist (productName: string): Promise<boolean> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    const isExist = data.then(({ email }) => {\n      return email.indexOf(productName) !== -1\n    })\n    return isExist\n  }\n}"]},"metadata":{},"sourceType":"module"}