{"ast":null,"code":"import BASE_URL from \"../global/API\";\nexport class UsersRepository {\n  constructor() {\n    this.API = `${BASE_URL}/users`;\n  }\n\n  getAll() {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    return data;\n  }\n\n  getById(id) {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    const userById = data.then(user => user.filter(user => user.id === id));\n    return userById;\n  }\n\n  post(nome, email, cpf, senha) {\n    const response = fetch(this.API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nome,\n        email,\n        cpf,\n        senha\n      })\n    });\n    const data = response.then(data => data.json());\n    const userId = data.then(data => data.id);\n    return userId;\n  }\n\n  patch(payload) {\n    const response = fetch(this.API, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = response.then(data => data.json());\n    const userId = data.then(data => data.id);\n    return userId;\n  }\n\n  verifiyLogin(nome, senha) {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    const isValid = data.then(userData => userData.nome === nome && userData.senha === senha);\n    return isValid;\n  }\n\n  verifyIfExist(userEmail) {\n    const response = fetch(this.API);\n    const data = response.then(data => data.json());\n    const emailList = data.then(responseData => {\n      return responseData.map(data => data.email);\n    });\n    const isExist = emailList.then(email => email.indexOf(userEmail) !== -1);\n    return isExist;\n  }\n\n}","map":{"version":3,"sources":["/home/davi/Development/mk-info/view/src/repository/Users.ts"],"names":["BASE_URL","UsersRepository","API","getAll","response","fetch","data","then","json","getById","id","userById","user","filter","post","nome","email","cpf","senha","method","headers","body","JSON","stringify","userId","patch","payload","verifiyLogin","isValid","userData","verifyIfExist","userEmail","emailList","responseData","map","isExist","indexOf"],"mappings":"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","sourcesContent":["import { IUser } from \"../global/interfaces\";\nimport BASE_URL from \"../global/API\";\n\nexport class UsersRepository {\n  private API = `${BASE_URL}/users`\n\n  public getAll (): Promise<IUser> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    return data\n  }\n\n  public getById (id: number): Promise<IUser> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    const userById = data.then(user => user.filter((user: IUser) => user.id === id))\n    return userById\n  }\n\n  public post (nome: string, email: string, cpf: string, senha: string): Promise<number> {\n    const response = fetch(this.API, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ nome, email, cpf, senha })\n    })\n    const data = response.then(data => data.json())\n    const userId = data.then(data => data.id)\n    return userId\n  }\n\n  public patch (payload: Object) {\n    const response = fetch(this.API, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    })\n    const data = response.then(data => data.json())\n    const userId = data.then(data => data.id)\n    return userId\n  }\n\n  public verifiyLogin (nome: string, senha: string): Promise<boolean> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    const isValid = data.then(userData => userData.nome === nome && userData.senha === senha)\n    return isValid\n  }\n\n  public verifyIfExist (userEmail: string): Promise<boolean> {\n    const response = fetch(this.API)\n    const data = response.then(data => data.json())\n    const emailList = data.then(responseData => {\n      return responseData.map((data: IUser) => data.email)\n    })\n    const isExist = emailList.then(email => email.indexOf(userEmail) !== -1)\n    return isExist\n  }\n}"]},"metadata":{},"sourceType":"module"}